package com.chatop.controller;

import com.chatop.config.JwtUtil;
import com.chatop.dto.LoginDTO;
import com.chatop.dto.LoginResponseDTO;
import com.chatop.dto.UserDTO;
import com.chatop.model.User;
import com.chatop.repository.UserRepository;
import com.chatop.service.UserService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.web.bind.annotation.*;

@RestController // D√©clare cette classe comme contr√¥leur REST, les m√©thodes renvoient des r√©ponses HTTP JSON
@RequestMapping("/api/auth") // Pr√©fixe d‚ÄôURL pour toutes les routes de ce contr√¥leur
@Tag(name = "Authentification", description = "Inscription, connexion et r√©cup√©ration des utilisateurs")
public class AuthController {

  @Autowired
  private UserRepository userRepository; // Acc√®s direct √† la base de donn√©es utilisateurs

  @Autowired
  private UserService userService; // Service contenant la logique m√©tier utilisateur

  @Autowired
  private JwtUtil jwtUtil; // Classe utilitaire pour g√©n√©rer les tokens JWT

  @Autowired
  private PasswordEncoder passwordEncoder; // Encodeur pour hacher les mots de passe

  /**
   * Inscription d‚Äôun utilisateur (POST /api/auth/register)
   * Re√ßoit un objet `User` et le sauvegarde via le service.
   */
  @PostMapping("/register")
  @Operation(summary = "Inscription d‚Äôun utilisateur", description = "Cr√©e un compte utilisateur √† partir des donn√©es fournies.")
  public ResponseEntity<?> register(@RequestBody User user) {
    User savedUser = userService.saveUser(user);
    String token = jwtUtil.generateToken(savedUser.getEmail()); // üîê G√©n√®re le token
    return ResponseEntity.ok(new LoginResponseDTO(token)); // üîÅ Renvoie le m√™me format que /login
  }

  /**
   * Connexion de l'utilisateur (POST /api/auth/login)
   * V√©rifie email + mot de passe, et g√©n√®re un token JWT.
   */
  @PostMapping("/login")
  public ResponseEntity<?> login(@RequestBody LoginDTO loginDTO) {
    User user = userRepository.findByEmail(loginDTO.getEmail());

    if (user == null || !passwordEncoder.matches(loginDTO.getPassword(), user.getPassword())) {
      return ResponseEntity.status(401).body("Invalid credentials");
    }

    String token = jwtUtil.generateToken(user.getEmail());
    return ResponseEntity.ok(new LoginResponseDTO(token));
  }

  /**
   * R√©cup√®re l'utilisateur connect√© (GET /api/auth/me)
   * Extrait l'email depuis le JWT, renvoie l‚Äôobjet utilisateur correspondant.
   */
  @GetMapping("/me")
  @Operation(summary = "R√©cup√©rer l‚Äôutilisateur connect√©", description = "Retourne les informations du profil actuellement connect√©.")
  public ResponseEntity<UserDTO> getCurrentUser(Authentication authentication) {
    String email = (String) authentication.getPrincipal();
    User user = userRepository.findByEmail(email);

    UserDTO userDTO = new UserDTO(
      user.getId(),
      user.getEmail(),
      user.getName(),
      user.getCreated_at(),
      user.getUpdated_at()
    );

    return ResponseEntity.ok(userDTO);
  }

  /**
   * R√©cup√®re un utilisateur via son ID (GET /api/auth/user/{id})
   */
  @GetMapping("/user/{id}")
  @Operation(summary = "R√©cup√©rer un utilisateur par ID", description = "Retourne les informations d‚Äôun utilisateur sp√©cifique.")
  public ResponseEntity<UserDTO> getUserById(@PathVariable Long id) {
    return userRepository.findById(id)
      .map(user -> new UserDTO(
        user.getId(),
        user.getEmail(),
        user.getName(),
        user.getCreated_at(),
        user.getUpdated_at()
      ))
      .map(ResponseEntity::ok)
      .orElse(ResponseEntity.notFound().build());
  }
}
